// Generated by the protocol buffer compiler.  DO NOT EDIT!
// clang-format off
// source: net.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers.h>
#else
 #import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30007
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30007 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

@class StreamConnectRequest_ConnectInitReq;
@class StreamConnectRequest_encryptKeyInfo;

NS_ASSUME_NONNULL_BEGIN

#pragma mark - NetRoot

/**
 * Exposes the extension registry for this file.
 *
 * The base class provides:
 * @code
 *   + (GPBExtensionRegistry *)extensionRegistry;
 * @endcode
 * which is a @c GPBExtensionRegistry that includes all the extensions defined by
 * this file and all files that it depends on.
 **/
GPB_FINAL @interface NetRoot : GPBRootObject
@end

#pragma mark - SendMsgRequest

typedef GPB_ENUM(SendMsgRequest_FieldNumber) {
  SendMsgRequest_FieldNumber_MessageId = 1,
  SendMsgRequest_FieldNumber_SenderPubkey = 2,
  SendMsgRequest_FieldNumber_ReceiverPubkey = 3,
  SendMsgRequest_FieldNumber_AppId = 4,
  SendMsgRequest_FieldNumber_Blockheight = 5,
  SendMsgRequest_FieldNumber_EncryptMsg = 6,
  SendMsgRequest_FieldNumber_Signature = 7,
};

/**
 * SendMsgRequest
 **/
GPB_FINAL @interface SendMsgRequest : GPBMessage

/** 消息ID */
@property(nonatomic, readwrite, copy, null_resettable) NSData *messageId;

/** 发送者公钥 */
@property(nonatomic, readwrite, copy, null_resettable) NSData *senderPubkey;

/** 接收者公钥 */
@property(nonatomic, readwrite, copy, null_resettable) NSData *receiverPubkey;

/** 应用标志 */
@property(nonatomic, readwrite, copy, null_resettable) NSData *appId;

/** 发送消息时的区块高度 */
@property(nonatomic, readwrite) uint32_t blockheight;

/** 接收者公钥加密的数据 */
@property(nonatomic, readwrite, copy, null_resettable) NSData *encryptMsg;

/** 发送者私钥对（messageId+receiverPubkey+appIdentify+blockheight+encryptMsg)的签名 */
@property(nonatomic, readwrite, copy, null_resettable) NSData *signature;

@end

#pragma mark - SendMsgReply

/**
 *
 **/
GPB_FINAL @interface SendMsgReply : GPBMessage

@end

#pragma mark - StreamConnectRequest

typedef GPB_ENUM(StreamConnectRequest_FieldNumber) {
  StreamConnectRequest_FieldNumber_InitReq = 1,
  StreamConnectRequest_FieldNumber_ChallegeResp = 2,
  StreamConnectRequest_FieldNumber_Frame = 3,
};

typedef GPB_ENUM(StreamConnectRequest_Payload_OneOfCase) {
  StreamConnectRequest_Payload_OneOfCase_GPBUnsetOneOfCase = 0,
  StreamConnectRequest_Payload_OneOfCase_InitReq = 1,
  StreamConnectRequest_Payload_OneOfCase_ChallegeResp = 2,
  StreamConnectRequest_Payload_OneOfCase_Frame = 3,
};

GPB_FINAL @interface StreamConnectRequest : GPBMessage

@property(nonatomic, readonly) StreamConnectRequest_Payload_OneOfCase payloadOneOfCase;

/** 请求建立连接 */
@property(nonatomic, readwrite, strong, null_resettable) StreamConnectRequest_ConnectInitReq *initReq;
- (StreamConnectRequest_ConnectInitReq *)initReq GPB_METHOD_FAMILY_NONE;

/** 对方发来的challenge进行签名后的响应 */
@property(nonatomic, readwrite, copy, null_resettable) NSData *challegeResp;

/** 流数据，包含对称密钥加密的数据,具体数据内容格式应用可以根据需要自定义 */
@property(nonatomic, readwrite, copy, null_resettable) NSData *frame;

@end

/**
 * Clears whatever value was set for the oneof 'payload'.
 **/
void StreamConnectRequest_ClearPayloadOneOfCase(StreamConnectRequest *message);

#pragma mark - StreamConnectRequest_ConnectInitReq

typedef GPB_ENUM(StreamConnectRequest_ConnectInitReq_FieldNumber) {
  StreamConnectRequest_ConnectInitReq_FieldNumber_Pubkey = 1,
  StreamConnectRequest_ConnectInitReq_FieldNumber_EncryptKey = 2,
};

GPB_FINAL @interface StreamConnectRequest_ConnectInitReq : GPBMessage

/** 请求连接的用户pubkey */
@property(nonatomic, readwrite, copy, null_resettable) NSData *pubkey;

/** 请求建立连接携带的密钥信息 */
@property(nonatomic, readwrite, strong, null_resettable) StreamConnectRequest_encryptKeyInfo *encryptKey;
/** Test to see if @c encryptKey has been set. */
@property(nonatomic, readwrite) BOOL hasEncryptKey;

@end

#pragma mark - StreamConnectRequest_encryptKeyInfo

typedef GPB_ENUM(StreamConnectRequest_encryptKeyInfo_FieldNumber) {
  StreamConnectRequest_encryptKeyInfo_FieldNumber_Type = 1,
  StreamConnectRequest_encryptKeyInfo_FieldNumber_SymKey = 2,
  StreamConnectRequest_encryptKeyInfo_FieldNumber_Reserve = 3,
};

/**
 * 通信使用的加密信息
 **/
GPB_FINAL @interface StreamConnectRequest_encryptKeyInfo : GPBMessage

/** 加密类型，后续根据需要，对加密算法扩展 0:不加密 1:AES-GCM 2:SM4 (注意：当前sdk只实现了AES) */
@property(nonatomic, readwrite) uint32_t type;

/** 用接受者公钥加密对对称密钥加密,只有接收者可以收到 */
@property(nonatomic, readwrite, copy, null_resettable) NSData *symKey;

/** 保留字段，后续扩展使用 */
@property(nonatomic, readwrite, copy, null_resettable) NSData *reserve;

@end

#pragma mark - StreamConnectReply

typedef GPB_ENUM(StreamConnectReply_FieldNumber) {
  StreamConnectReply_FieldNumber_Challenge = 1,
  StreamConnectReply_FieldNumber_Status = 2,
  StreamConnectReply_FieldNumber_Frame = 3,
};

typedef GPB_ENUM(StreamConnectReply_Payload_OneOfCase) {
  StreamConnectReply_Payload_OneOfCase_GPBUnsetOneOfCase = 0,
  StreamConnectReply_Payload_OneOfCase_Challenge = 1,
  StreamConnectReply_Payload_OneOfCase_Status = 2,
  StreamConnectReply_Payload_OneOfCase_Frame = 3,
};

GPB_FINAL @interface StreamConnectReply : GPBMessage

@property(nonatomic, readonly) StreamConnectReply_Payload_OneOfCase payloadOneOfCase;

@property(nonatomic, readwrite, copy, null_resettable) NSData *challenge;

/** 连接建立状态响应，0:建立成功 1:建立失败 2:关闭连接 */
@property(nonatomic, readwrite) int32_t status;

/** 流数据，包含对称密钥加密的数据 */
@property(nonatomic, readwrite, copy, null_resettable) NSData *frame;

@end

/**
 * Clears whatever value was set for the oneof 'payload'.
 **/
void StreamConnectReply_ClearPayloadOneOfCase(StreamConnectReply *message);

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)

// clang-format on
